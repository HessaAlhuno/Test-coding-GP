import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:table_calendar/table_calendar.dart';

class LawyerSchedulePage extends StatefulWidget {
  const LawyerSchedulePage({Key? key}) : super(key: key);

  @override
  State<LawyerSchedulePage> createState() => _LawyerSchedulePageState();
}



class _LawyerSchedulePageState extends State<LawyerSchedulePage> {
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  Set<String> _selectedSlots = {};
  TimeOfDay? _selectedTime;
  Set<String> _bookedSlots = {};
  Set<String> _slotsToMakeAvailable = {}; // ⬅️ الأوقات التي سيتم إلغاء الحجز عنها
  Set<DateTime> _holidayDates = <DateTime>{};
  Set<DateTime> _workDays = <DateTime>{};

// تاريخ بدون وقت (عشان المقارنة تكون صح داخل الـ Set)
  DateTime _d(DateTime x) => DateTime(x.year, x.month, x.day);


  @override
  void initState() {
    super.initState();
    DateTime now = DateTime.now();
    _selectedDay = DateTime(now.year, now.month, now.day);
    _focusedDay = _selectedDay!;
    _loadWorkDays();
  }

  Future<void> _loadWorkDays() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) return;

    final snapshot = await FirebaseFirestore.instance
        .collection('Appointments')
        .where('lawyerId', isEqualTo: currentUser.uid)
        .get();

    final work = <DateTime>{};
    for (var doc in snapshot.docs) {
      final data = doc.data();
      if (data['date'] != null) {
        final dateOnly = DateTime.parse(data['date']);
        work.add(_d(dateOnly));
      }
    }

    setState(() {
      _workDays = work;
    });
  }


  final List<TimeOfDay> _timeSlots = [
    TimeOfDay(hour: 9, minute: 0),
    TimeOfDay(hour: 10, minute: 0),
    TimeOfDay(hour: 11, minute: 0),
    TimeOfDay(hour: 12, minute: 0),
    TimeOfDay(hour: 13, minute: 0),
    TimeOfDay(hour: 14, minute: 0),
    TimeOfDay(hour: 15, minute: 0),
    TimeOfDay(hour: 16, minute: 0),
  ];

  bool _isPastDate(DateTime day) {
    final now = DateTime.now();
    final todayOnly = DateTime(now.year, now.month, now.day);
    final selectedOnly = DateTime(day.year, day.month, day.day);
    return selectedOnly.isBefore(todayOnly);
  }

  String _formatTime(TimeOfDay time) {
    final now = DateTime.now();
    final dt = DateTime(now.year, now.month, now.day, time.hour, time.minute);
    return TimeOfDay.fromDateTime(dt).format(context);
  }

  Future<void> _loadBookedSlots() async {
    if (_selectedDay == null) return;
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) return;

    final dateStr = _selectedDay!.toIso8601String().split('T')[0];
    final snapshot = await FirebaseFirestore.instance
        .collection('Appointments')
        .where('lawyerId', isEqualTo: currentUser.uid)
        .where('date', isEqualTo: dateStr)
        .get();

    final booked = <String>{};
    for (var doc in snapshot.docs) {
      final data = doc.data();
      if ((data['userId'] != null && data['userId'].toString().isNotEmpty) ||
          (data['isAvailable'] == false) ||
          (data['isHoliday'] == true)) {
        booked.add(data['time'] ?? '');
      }
    }

    setState(() {
      _bookedSlots = booked;
      _selectedSlots.clear();
      _slotsToMakeAvailable.clear();
    });
  }

  Future<void> _saveSelectedSlots() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null || _selectedDay == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('الرجاء اختيار يوم وأوقات أولاً')),
      );
      return;
    }

    final dateStr = _selectedDay!.toIso8601String().split('T')[0];

    // ⬅️ حفظ الأوقات الجديدة كمشغولة
    for (final slot in _selectedSlots) {
      final existing = await FirebaseFirestore.instance
          .collection('Appointments')
          .where('lawyerId', isEqualTo: currentUser.uid)
          .where('date', isEqualTo: dateStr)
          .where('time', isEqualTo: slot)
          .limit(1)
          .get();

      if (existing.docs.isNotEmpty) continue;

      await FirebaseFirestore.instance.collection('Appointments').add({
        'lawyerId': currentUser.uid,
        'userId': null,
        'date': dateStr,
        'time': slot,
        'isAvailable': false,
        'isHoliday': false,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });
    }

    // ⬅️ حذف الأوقات التي تم اختيارها لإلغاء الحجز
    for (final slot in _slotsToMakeAvailable) {
      final query = await FirebaseFirestore.instance
          .collection('Appointments')
          .where('lawyerId', isEqualTo: currentUser.uid)
          .where('date', isEqualTo: dateStr)
          .where('time', isEqualTo: slot)
          .limit(1)
          .get();

      for (var doc in query.docs) {
        await doc.reference.delete();
      }
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('تم تحديث الأوقات بنجاح')),
    );
    // حدّث حالة اليوم كبُني إذا صار فيه أي مواعيد محفوظة
    final dateKey = _d(_selectedDay!);
    final dayDocs = await FirebaseFirestore.instance
        .collection('Appointments')
        .where('lawyerId', isEqualTo: currentUser.uid)
        .where('date', isEqualTo: dateStr)
        .get();

    setState(() {
      if (dayDocs.docs.isNotEmpty) {
        _workDays.add(dateKey);
      } else {
        _workDays.remove(dateKey);
      }
    });

    _slotsToMakeAvailable.clear();
    await _loadWorkDays();
    await _loadBookedSlots();
  }

  void _showSlotPicker() async {
    await _loadBookedSlots();
    showModalBottomSheet(
      context: context,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(' اختر أوقات العمل:',
                style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 12),
            Wrap(
              spacing: 10,
              runSpacing: 10,
              children: _timeSlots.map((time) {
                final label = _formatTime(time);
                final isDisabled = _bookedSlots.contains(label);
                final isSelected = _selectedSlots.contains(label);
                final isToRelease = _slotsToMakeAvailable.contains(label);

                return FilterChip(
                  label: Text(label),
                  selected: isDisabled ? isToRelease : isSelected,
                  onSelected: (val) {
                    setState(() {
                      if (isDisabled) {
                        if (val) {
                          _slotsToMakeAvailable.add(label);
                        } else {
                          _slotsToMakeAvailable.remove(label);
                        }
                      } else {
                        if (val) {
                          _selectedSlots.add(label);
                        } else {
                          _selectedSlots.remove(label);
                        }
                      }
                    });
                  },
                  selectedColor: isDisabled ? Colors.red : Color(0xFF594840),
                  checkmarkColor: Colors.white,
                  labelStyle: TextStyle(
                    color: Colors.white,
                  ),
                  backgroundColor:
                  isDisabled ? Colors.grey : Color(0xFF9B7D73),
                );
              }).toList(),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                _saveSelectedSlots();
              },
              child: Text('حفظ الأوقات'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFF9B7D73),
                padding: EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(40),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF4E3DB),
      appBar: AppBar(
        backgroundColor: Color(0xFF052532),
        title: Text('إدارة المواعيد', style: TextStyle(color: Colors.white)),
        centerTitle: true,
      ),
      body: Column(
        children: [
          TableCalendar(
            firstDay: DateTime.utc(2022, 1, 1),
            lastDay: DateTime.utc(2030, 12, 31),
            focusedDay: _focusedDay,
            selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
            holidayPredicate: (day) {
              return _holidayDates.any((holiday) =>
              holiday.year == day.year &&
                  holiday.month == day.month &&
                  holiday.day == day.day);
            },
            onDaySelected: (selectedDay, focusedDay) {
              if (_isPastDate(selectedDay)) return;
              setState(() {
                _selectedDay = selectedDay;
                _focusedDay = focusedDay;
              });
              _loadBookedSlots();
            },
            calendarStyle: CalendarStyle(
              selectedDecoration:
              BoxDecoration(color: Color(0xFF052532), shape: BoxShape.circle),
              todayDecoration:
              BoxDecoration(color: Color(0xFF052532), shape: BoxShape.circle),
              disabledTextStyle: TextStyle(color: Colors.grey),
              holidayTextStyle: TextStyle(color: Colors.grey),
              holidayDecoration:
              BoxDecoration(color: Colors.grey.shade400, shape: BoxShape.circle),
            ),
            enabledDayPredicate: (day) => !_isPastDate(day),
            headerStyle: HeaderStyle(
              titleCentered: true,
              formatButtonVisible: false,
              titleTextStyle:
              TextStyle(color: Color(0xFF052532), fontWeight: FontWeight.bold),
            ),
            calendarBuilders: CalendarBuilders(
              defaultBuilder: (context, day, focusedDay) {
                final dayOnly = _d(day);
                final isWork = _workDays.contains(dayOnly);
                final isHoliday = _holidayDates.contains(dayOnly);
                final isSelected = isSameDay(_selectedDay, day);
                final isToday = isSameDay(day, DateTime.now());

                // لو اليوم يوم عمل: دائرة بني غامق (إلا إذا اليوم مختار أو اليوم الحالي أو إجازة)
                if (isWork && !isSelected && !isToday && !isHoliday) {
                  return Center(
                    child: Container(
                      width: 36,
                      height: 36,
                      decoration: const BoxDecoration(
                        color: Color(0xFF9B7D73),
                        // بني غامق من ألوان تطبيقك
                        shape: BoxShape.circle,
                      ),
                      alignment: Alignment.center,
                      child: Text(
                        '${day.day}',
                        style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
                      ),
                    ),
                  );
                }

                // غير كذا: الرجوع للشكل الافتراضي
                return null;
              },
            ),

          ),
          const SizedBox(height: 16),
          if (_selectedDay != null)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton(
                          onPressed: _showSlotPicker,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xFF9B7D73),
                            padding: EdgeInsets.symmetric(vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(40),
                            ),
                          ),
                          child: Text(
                            'اختيار الوقت',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                      SizedBox(width: 16),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () async {
                            final currentUser = FirebaseAuth.instance.currentUser;
                            if (_selectedDay == null || currentUser == null) return;

                            final dateStr = _selectedDay!.toIso8601String().split('T')[0];

                            final snapshot = await FirebaseFirestore.instance
                                .collection('Appointments')
                                .where('lawyerId', isEqualTo: currentUser.uid)
                                .where('date', isEqualTo: dateStr)
                                .limit(1)
                                .get();

                            if (snapshot.docs.isNotEmpty &&
                                snapshot.docs.first['userId'] != null &&
                                snapshot.docs.first['userId'] != "") {
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(content: Text('لا يمكن تحديد/إلغاء اليوم كإجازة لأنه محجوز من قبل مستخدم')),
                              );
                              return;
                            }

                            setState(() {
                              if (_holidayDates.contains(_selectedDay)) {
                                _holidayDates.remove(_selectedDay!);
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(content: Text('تم إلغاء الإجازة')),
                                );
                              } else {
                                _holidayDates.add(_selectedDay!);
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(content: Text('تم تحديد اليوم كإجازة')),
                                );
                              }
                            });
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xFF9B7D73),
                            padding: EdgeInsets.symmetric(vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(40),
                            ),
                          ),
                          child: Text(
                            _selectedDay != null && _holidayDates.contains(_selectedDay)
                                ? 'إلغاء الإجازة'
                                : 'إجازة',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 70),
                  Center(
                    child: Text(
                      _selectedTime != null
                          ? _selectedTime!.format(context)
                          : 'لا تواجد مواعيد',
                      style: TextStyle(
                        color: Color(0xFF052532),
                        fontSize: 14,
                      ),
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}
