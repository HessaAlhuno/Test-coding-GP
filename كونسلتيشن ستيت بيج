import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'ShawirRequestConsultation.dart';

class ConsultationStatusPage extends StatefulWidget {
  const ConsultationStatusPage({super.key});

  @override
  State<ConsultationStatusPage> createState() => _ConsultationStatusPageState();
}

class _ConsultationStatusPageState extends State<ConsultationStatusPage> {
  User? currentUser;
  String? userName;
  String? expandedConsultationId;

  @override
  void initState() {
    super.initState();
    currentUser = FirebaseAuth.instance.currentUser;
    fetchUserName();
  }

  Future<void> fetchUserName() async {
    if (currentUser != null) {
      final doc = await FirebaseFirestore.instance
          .collection('Individual')
          .doc(currentUser!.uid)
          .get();

      if (doc.exists) {
        setState(() {
          userName = doc.data()?['display_name'] ?? '';
        });
      }
    }
  }

  Future<void> uploadFiles(BuildContext context, String consultationId) async {
    try {
      final result = await FilePicker.platform.pickFiles(
        allowMultiple: true,
        withReadStream: true,
        type: FileType.custom,
        allowedExtensions: ['pdf','doc','docx','png','jpg','jpeg','heic','txt','ppt','pptx','xls','xlsx'],
      );

      if (result == null || result.files.isEmpty) return;

      final List<Map<String, dynamic>> uploaded = [];

      for (final f in result.files) {
        if (f.path == null) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('لا يمكن رفع هذا الملف على هذا النظام.')),
          );
          continue;
        }

        final file = File(f.path!);
        final fileName = f.name;
        final mime = f.extension ?? '';
        final size = f.size;

        final ref = FirebaseStorage.instance
            .ref()
            .child('consultation_files/$consultationId/${DateTime.now().millisecondsSinceEpoch}_$fileName');

        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (_) => const Center(child: CircularProgressIndicator()),
        );

        await ref.putFile(file);
        final url = await ref.getDownloadURL();

        if (Navigator.canPop(context)) Navigator.pop(context);

        uploaded.add({
          'name': fileName,
          'url': url,
          'size': size,
          'mime': mime,
          'uploaded_at': FieldValue.serverTimestamp(),
          'uploader_uid': FirebaseAuth.instance.currentUser?.uid,
        });
      }

      if (uploaded.isNotEmpty) {
        await FirebaseFirestore.instance
            .collection('Consultations')
            .doc(consultationId)
            .set({
          'files': FieldValue.arrayUnion(uploaded),
        }, SetOptions(merge: true));

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('✅ تم رفع ${uploaded.length} ملف/ملفات بنجاح')),
        );
      }
    } catch (e) {
      if (Navigator.canPop(context)) Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('❌ فشل في رفع الملف: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (currentUser == null) {
      return const Scaffold(
        body: Center(child: Text('يرجى تسجيل الدخول أولاً')),
      );
    }

    return Scaffold(
      backgroundColor: const Color(0xFFF4E3DB),
      body: SafeArea(
        child: StreamBuilder<QuerySnapshot>(
          stream: FirebaseFirestore.instance
              .collection('Consultations')
              .where('user_uid', isEqualTo: currentUser!.uid)
              .snapshots(),
          builder: (context, snapshot) {
            if (!snapshot.hasData || snapshot.hasError) {
              return const Center(child: CircularProgressIndicator());
            }

            try {
              final allDocs = snapshot.data!.docs;
              final consultations = allDocs.where((doc) {
                final ct = doc['created_time'];
                return ct != null && ct is Timestamp;
              }).toList();

              consultations.sort((a, b) {
                return (b['created_time'] as Timestamp)
                    .compareTo(a['created_time'] as Timestamp);
              });

              return Column(
                children: [
                  const SizedBox(height: 20),
                  Container(
                    width: double.infinity,
                    color: const Color(0xFF052532),
                    padding: const EdgeInsets.fromLTRB(16, 32, 16, 64),
                    child: Column(
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: IconButton(
                            icon: const Icon(Icons.arrow_back_ios_new, color: Colors.white),
                            onPressed: () => Navigator.of(context).pop(),
                          ),
                        ),
                        const Center(
                          child: Text(
                            'فَإِذَا عَزَمْتَ فَتَوَكَّلْ عَلَى اللَّهِ',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                              height: 1.8,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                        const SizedBox(height: 18),
                        if (userName != null)
                          Text(
                            'مرحبًا، $userName',
                            style: const TextStyle(color: Colors.white, fontSize: 14),
                          ),
                      ],
                    ),
                  ),

                  Expanded(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 24.0),
                      child: consultations.isEmpty
                          ? const Center(child: Text('لا يوجد'))
                          : ListView.builder(
                        itemCount: consultations.length,
                        padding: const EdgeInsets.only(bottom: 80),
                        itemBuilder: (context, index) {
                          final doc = consultations[index];
                          final docId = doc.id;
                          final type = doc['type']?.toString().trim();
                          final status = doc['status']?.toString().trim();

                          String statusText = '';
                          switch (status) {
                            case 'pending':
                              statusText = 'قيد الانتظار';
                              break;
                            case 'accepted':
                              statusText = 'تم القبول';
                              break;
                            case 'rejected':
                              statusText = 'تم الرفض';
                              break;
                            case 'completed':
                              statusText = 'تمت المعالجة';
                              break;
                          }

                          return GestureDetector(
                            onTap: () {
                              setState(() {
                                expandedConsultationId =
                                expandedConsultationId == docId ? null : docId;
                              });
                            },
                            child: Container(
                              width: double.infinity,
                              margin: const EdgeInsets.only(bottom: 12),
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: const Color(0xFFA6847C),
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.end,
                                children: [
                                  Text('نوع الاستشارة: ${type != null && type.isNotEmpty ? type : 'لا يوجد نوع استشارة'}'),
                                  Text('الحالة: $statusText', style: const TextStyle(color: Colors.white)),
                                  if (expandedConsultationId == docId) ...[
                                    const SizedBox(height: 10),
                                    if (status == 'accepted')
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.end,
                                        children: [
                                          GestureDetector(
                                            onTap: () => uploadFiles(context, docId),

                                            child: Container(
                                              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                                              decoration: BoxDecoration(
                                                color: Colors.white,
                                                border: Border.all(color: Colors.black),
                                                borderRadius: BorderRadius.circular(6),
                                              ),
                                              child: const Text(
                                                "إرفاق الملفات",
                                                style: TextStyle(fontSize: 12, color: Colors.black),
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 8), // مسافة بين الزرين
                                          GestureDetector(
                                            onTap: () async {
                                              // يفتح نافذة التقويم
                                              final DateTime? pickedDate = await showDatePicker(
                                                context: context,
                                                initialDate: DateTime.now(),
                                                firstDate: DateTime.now(),
                                                lastDate: DateTime(2100),
                                              );

                                              if (pickedDate != null) {
                                                // يفتح نافذة اختيار الوقت
                                                final TimeOfDay? pickedTime = await showTimePicker(
                                                  context: context,
                                                  initialTime: TimeOfDay.now(),
                                                );

                                                if (pickedTime != null) {
                                                  final DateTime selectedDateTime = DateTime(
                                                    pickedDate.year,
                                                    pickedDate.month,
                                                    pickedDate.day,
                                                    pickedTime.hour,
                                                    pickedTime.minute,
                                                  );

                                                  // مبدئيًا: نعرض النتيجة على الشاشة بس
                                                  ScaffoldMessenger.of(context).showSnackBar(
                                                    SnackBar(content: Text("📅 اخترت: $selectedDateTime")),
                                                  );

                                                  // لاحقًا تقدر تخزن selectedDateTime في Firestore
                                                }
                                              }
                                            },

                                            child: Container(
                                              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                                              decoration: BoxDecoration(
                                                color: Colors.white,
                                                border: Border.all(color: Colors.black),
                                                borderRadius: BorderRadius.circular(6),
                                              ),
                                              child: const Text(
                                                "حدد موعدك",
                                                style: TextStyle(fontSize: 12, color: Colors.black),
                                              ),
                                            ),
                                          ),
                                        ],
                                      )
                                    else if (status == 'rejected')
                                      const Text(
                                        "نعتذر، لم يتم قبول طلب الاستشارة",
                                        style: TextStyle(color: Colors.white),
                                      )
                                    else if (status == 'pending')
                                        const Text(
                                          "طلبك قيد الانتظار",
                                          style: TextStyle(color: Colors.white),
                                        )
                                      else if (status == 'completed')
                                          const Text(
                                            "🎉 تم إنجاز الاستشارة بنجاح",
                                            style: TextStyle(color: Colors.white),
                                          ),
                                  ]
                                ],
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ),

                  const Divider(thickness: 0.6),
                  const SizedBox(height: 12),
                  ElevatedButton(
                    onPressed: () async {
                      final result = await Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const ShawirRequestConsultation()),
                      );
                      if (result == 'submitted') {
                        setState(() {});
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF9B7D73),
                      shape: const CircleBorder(),
                      padding: const EdgeInsets.all(32),
                    ),
                    child: const Text("شاور", style: TextStyle(fontSize: 16, color: Colors.white)),
                  ),
                  const SizedBox(height: 24),
                ],
              );
            } catch (e) {
              return const Center(child: Text('❌ حدث خطأ أثناء معالجة البيانات'));
            }
          },
        ),
      ),
    );
  }
}
