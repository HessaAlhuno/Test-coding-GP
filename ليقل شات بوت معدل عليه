import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:pdf/pdf.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:open_file/open_file.dart';
import 'package:flutter/services.dart' show rootBundle;



// ✅ إضافات HTTP:
import 'dart:convert';
import 'package:http/http.dart' as http;

// ====== موديل ونوع الرسالة ======
enum Role { user, assistant, typing, documentOptions, pdfFile }



class Message {
  final String text;
  final Role role;
  Message({required this.text, required this.role});
}

// ====== ثابت لمسار أيقونة الانتظار ======
const String kWaitingSvg = 'assets/icons/waiting_response.svg';

// ====== صفحة الشات ======
class LegalChatBot extends StatefulWidget {
  const LegalChatBot({Key? key}) : super(key: key);

  @override
  State<LegalChatBot> createState() => _LegalChatBotState();
}

class _LegalChatBotState extends State<LegalChatBot> {
  // تحكمات
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scroll = ScrollController();

  // قائمة الرسائل
  final List<Message> _messages = [];
  String? selectedDocumentType;
  List<String> pendingQuestions = [];
  int currentQuestionIndex = 0;
  List<String> userAnswers = [];


  // ====== الأسئلة الخاصة بكل نوع مستند ======
  final Map<String, List<String>> documentQuestions = {
    "عقد نفقة": [
      "ما اسم الأب الكامل؟",
      "ما رقم الهوية الوطنية للأب؟",
      "ما اسم الأم الكامل؟",
      "كم عدد الأطفال؟",
      "كم مبلغ النفقة لكل طفل؟",
      "كيف سيتم دفع النفقة؟ (نقدًا / تحويل بنكي)",
      "متى يبدأ الالتزام بالدفع؟",
      "هل توجد شروط إضافية؟"
    ],
    "اتفاق حضانة": [
      "ما اسم الطرف الأول؟",
      "ما اسم الطرف الثاني؟",
      "اسم الطفل / الأطفال؟",
      "ما مدة الحضانة؟",
      "هل هناك شروط محددة للحضانة؟",
      "من المسؤول عن النفقات اليومية؟"
    ],
    "إشعار طلاق": [
      "اسم الزوج؟",
      "اسم الزوجة؟",
      "تاريخ الزواج؟",
      "تاريخ الطلاق أو الرغبة في الطلاق؟",
      "سبب الطلاق (اختياري)?",
      "هل يوجد أطفال من الزواج؟ وكم عددهم؟"
    ],
    "اتفاق عدم التعرض": [
      "ما اسم الطرف الأول؟",
      "ما اسم الطرف الثاني؟",
      "ما نوع العلاقة بين الطرفين؟",
      "هل تم وقوع مضايقات أو تهديدات سابقًا؟",
      "ما البنود التي يوافق الطرفان على الالتزام بها؟",
      "مدة سريان الاتفاق؟",
      "هل يوجد شهود على الاتفاق؟"
    ],
  };


  // ألوان الهوية
  static const Color kBg = Color(0xFFEFECE8);     // الخلفية العامة
  static const Color kNavy = Color(0xFF062531);   // الكحلي (AppBar/فقاعة البوت)
  static const Color kTyping = Color(0xFF005A4F); // أخضر الهوية (للايقونات فقط هنا)
  static const Color kDots = Color(0xFFD9D9D9);   // نقاط الانتظار

  // ✅ رابط API — عدّله حسب اندبوينت البايثون عندك
  static const String kApiBase = 'https://lavelle-nonrefillable-rosamond.ngrok-free.dev';
  static const String kChatPath = '/search';

  // ✅ دالة الاتصال بالـ API
  Future<String> sendMessageToAPI(String message) async {
    try {
      // فلترة الأسئلة القصيرة جدًا (بناءً على عدد الكلمات)
      if (message.trim().split(' ').length < 2) {
        return '❌ الرجاء كتابة سؤالك القانوني بشكل أوضح.';
      }

      final uri = Uri.parse('$kApiBase$kChatPath');
      final resp = await http
          .post(
        uri,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'q': message}),
      )
          .timeout(const Duration(seconds: 20));

      if (resp.statusCode == 200) {
        final data = jsonDecode(utf8.decode(resp.bodyBytes));

        // 1) مباشرة answer / reply
        if (data is Map && (data['answer'] != null || data['reply'] != null)) {
          return (data['answer'] ?? data['reply']).toString();
        }

        // 2) best.answer
        if (data is Map && data['best'] is Map && (data['best']['answer'] != null)) {
          return data['best']['answer'].toString();
        }

        // 3) results[*].answer
        if (data is Map && data['results'] is List && data['results'].isNotEmpty) {
          final first = data['results'][0];
          if (first is Map && first['answer'] != null) {
            return first['answer'].toString();
          }
        }

        // احتياط: رجّع JSON نفسه
        return data.toString();
      } else {
        return '❌ خطأ من الخادم (${resp.statusCode}).';
      }
    } catch (e) {
      return '❌ تعذّر الاتصال بالخادم: $e';
    }
  }

  Future<void> _send() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    setState(() {
      _messages.add(Message(text: text, role: Role.user));
      _controller.clear();
    });
    _scrollToEnd();

    // ✅ إذا كنا في مرحلة الإجابة على أسئلة مستند قانوني
    if (pendingQuestions.isNotEmpty && selectedDocumentType != null) {
      if (!_isValidAnswer(pendingQuestions[currentQuestionIndex], text)) {
        setState(() {
          _messages.add(Message(text: '⚠️ الرجاء إدخال إجابة صحيحة لهذا السؤال.', role: Role.assistant));
        });
        return;
      }

      userAnswers.add(text);
      currentQuestionIndex++;

      if (currentQuestionIndex < pendingQuestions.length) {
        // باقي أسئلة
        setState(() {
          _messages.add(Message(
            text: pendingQuestions[currentQuestionIndex],
            role: Role.assistant,
          ));
        });
        return;
      } else {
        // ✅ خلصنا كل الأسئلة — توليد مستند وهمي
        final summary = StringBuffer('📄 تم إدخال البيانات التالية لـ "$selectedDocumentType":\n\n');
        for (int i = 0; i < userAnswers.length; i++) {
          summary.writeln('${i + 1}. ${pendingQuestions[i]}');
          summary.writeln('   → ${userAnswers[i]}');
        }

        final questionsCopy = List<String>.from(pendingQuestions);
        final answersCopy = List<String>.from(userAnswers);

        await generatePDF(selectedDocumentType!, questionsCopy, answersCopy);

        setState(() {
          selectedDocumentType = null;
          pendingQuestions = [];
          currentQuestionIndex = 0;
          userAnswers = [];
        });


        return;
      }
    }

    // ✅ اختيار نوع المستند (لو كتب المستخدم: "عقد نفقة" مثلاً)
    if (documentQuestions.containsKey(text)) {
      selectedDocumentType = text;
      pendingQuestions = documentQuestions[text]!;
      currentQuestionIndex = 0;
      userAnswers = [];

      setState(() {
        _messages.add(Message(
          text: pendingQuestions.first,
          role: Role.assistant,
        ));
      });
      return;
    }

    // ✅ الحالة العادية (رسالة قانونية عادية تروح للباكند)
    setState(() {
      _messages.add(Message(text: '', role: Role.typing));
    });
    _scrollToEnd();

    final reply = await sendMessageToAPI(text);

    setState(() {
      if (_messages.isNotEmpty && _messages.last.role == Role.typing) {
        _messages.removeLast();
      }
      _messages.add(Message(text: reply, role: Role.assistant));
    });
    _scrollToEnd();
  }

  bool _isValidAnswer(String question, String answer) {
    if (answer.trim().isEmpty) return false;

    // لو السؤال يطلب رقم
    if (question.contains('تاريخ') || question.contains('رقم') || question.contains('كم') || question.contains('مدة')) {
      return RegExp(r'^\d+$').hasMatch(answer); // فقط أرقام
    }

    // لو السؤال نصي (سبب الطلاق مثلاً)
    if (answer.trim().length < 2) return false; // نرفض حرف أو كلمة وحده

    return true; // كل شيء تمام
  }


  void _scrollToEnd() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scroll.hasClients) {
        _scroll.animateTo(
          _scroll.position.maxScrollExtent + 120,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  Future<void> generatePDF(String title, List<String> questions, List<String> answers) async {
    final pdf = pw.Document();
    final now = DateTime.now();
    final formattedDate = "${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}";

    // ✅ تحميل الخط العربي من المسار الصحيح
    final fontData = await rootBundle.load('assets/Front/Cairo/static/Cairo-Regular.ttf');
    final ttf = pw.Font.ttf(fontData);

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Directionality(
            textDirection: pw.TextDirection.rtl,
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text(title, style: pw.TextStyle(font: ttf, fontSize: 24, fontWeight: pw.FontWeight.bold)),
                pw.SizedBox(height: 8),
                pw.Text('التاريخ: $formattedDate', style: pw.TextStyle(font: ttf, fontSize: 16)),
                pw.SizedBox(height: 20),
                ...List.generate(questions.length, (index) {
                  return pw.Padding(
                    padding: const pw.EdgeInsets.only(bottom: 10),
                    child: pw.Text(
                      '${questions[index]}: ${answers[index]}',
                      style: pw.TextStyle(font: ttf, fontSize: 14),
                    ),
                  );
                }),
              ],
            ),
          );
        },
      ),
    );

    final outputDir = await getTemporaryDirectory();
    final file = File('${outputDir.path}/${title.replaceAll(" ", "_")}.pdf');
    await file.writeAsBytes(await pdf.save());

    setState(() {
      _messages.add(
        Message(
          text: 'تم إنشاء المستند "$title" بنجاح.\n\nاضغط لفتح الملف:',
          role: Role.assistant,
        ),
      );

      _messages.add(
        Message(
          text: file.path,
          role: Role.pdfFile,
        ),
      );
    });
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: kBg,
      appBar: AppBar(
        backgroundColor: kNavy,
        elevation: 4,
        title: const Text(
          'المساعد القانوني',
          style: TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Stack(
        children: [
          Positioned.fill(
            child: Padding(
              padding: const EdgeInsets.only(bottom: 90),
              child: ListView.builder(
                controller: _scroll,
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                itemCount: _messages.length + 1,
                itemBuilder: (context, i) {
                  if (i == 0) {
                    // ✅ الزر أول عنصر بالشات
                    return _buildContractButton();
                  } else {
                    return _buildBubble(_messages[i - 1]);
                  }
                },

              ),
            ),
          ),

          // شريط الإدخال
          Positioned(
            bottom: 20,
            left: 20,
            right: 20,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              decoration: BoxDecoration(
                color: kNavy,
                borderRadius: BorderRadius.circular(30),
                boxShadow: [
                  BoxShadow(color: Colors.black.withOpacity(0.1), blurRadius: 6, offset: const Offset(0, 2)),
                ],
              ),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _controller,
                      textDirection: TextDirection.rtl,
                      textAlign: TextAlign.right,
                      decoration: const InputDecoration(
                        hintText: '... اكتب سؤالك القانوني',
                        hintStyle: TextStyle(color: Colors.white70),
                        border: InputBorder.none,
                        isDense: true,
                        contentPadding: EdgeInsets.symmetric(vertical: 8),
                      ),
                      style: const TextStyle(color: Colors.white),
                      onSubmitted: (_) => _send(),
                    ),
                  ),
                  const SizedBox(width: 8),
                  InkWell(
                    onTap: _send,
                    borderRadius: BorderRadius.circular(24),
                    child: Container(
                      width: 48,
                      height: 48,
                      decoration: const BoxDecoration(
                        color: kBg,
                        shape: BoxShape.circle,
                      ),
                      child: Center(
                        child: SvgPicture.asset(
                          'assets/icons/bot-svgrepo-com.svg',
                          width: 30,
                          height: 30,
                          color: kTyping,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // يبني الفقاعة حسب نوع الرسالة
  Widget _buildBubble(Message m) {
    switch (m.role) {
      case Role.user:
        return NormalChatBubble(
          text: m.text,
          alignRight: true,
          bgColor: Color(0xFF9B7D73),
          textColor: Colors.white,
        );
      case Role.assistant:
        return NormalChatBubble(
          text: m.text,
          alignRight: false,
          bgColor: kNavy,
          textColor: Colors.white,
        );
      case Role.typing:
        if (m.text == "doc_type_selection") {
          return const DocumentTypeOptions();
        } else {
          return const Padding(
            padding: EdgeInsets.symmetric(vertical: 6, horizontal: 6),
            child: WaitingBubbleSvg(),
          );
        }
      case Role.documentOptions:
        return const DocumentTypeOptions();

      case Role.pdfFile:
        return GestureDetector(
          onTap: () {
            OpenFile.open(m.text);
          },
          child: Container(
            margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.grey.shade200,
              borderRadius: BorderRadius.circular(14),
              border: Border.all(color: Colors.grey),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.picture_as_pdf, color: Colors.red),
                const SizedBox(width: 8),
                Text("فتح الملف", style: TextStyle(fontSize: 15)),
              ],
            ),
          ),
        );
    }
  }




  Widget _buildContractButton() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      child: Align(
        alignment: Alignment.center,
        child: ElevatedButton.icon(
          style: ElevatedButton.styleFrom(
            backgroundColor: kNavy,
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 14),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
          ),
          icon: const Icon(Icons.description, color: Colors.white),
          label: const Text(
            'إنشاء عقد',
            style: TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.bold),
          ),
          onPressed: () {
            setState(() {
              _messages.add(Message(
                text: "ما نوع المستند الذي ترغب في إنشائه؟",
                role: Role.assistant,
              ));
              _messages.add(
                Message(
                  text: "doc_type_selection",
                  role: Role.documentOptions, // ✅ مهم
                ),
              );
            });
            _scrollToEnd();
          },


        ),
      ),
    );
  }
  void _handleContractStart() {
    setState(() {
      _messages.add(Message(
        text: 'ما نوع المستند الذي ترغب في إنشائه؟\n\n'
            '📄 عقد نفقة\n'
            '👶 اتفاق حضانة\n'
            ' إشعار طلاق\n'
            ' اتفاق عدم التعرضر',
        role: Role.assistant,
      ));
    });
    _scrollToEnd();
  }

}

// ====== فقاعة جديدة بالـ Container بدل SVG ======
class NormalChatBubble extends StatelessWidget {
  final String text;
  final bool alignRight;
  final Color bgColor;
  final Color textColor;

  const NormalChatBubble({
    super.key,
    required this.text,
    required this.alignRight,
    required this.bgColor,
    required this.textColor,
  });

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: alignRight ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        constraints: BoxConstraints(
          maxWidth: MediaQuery.of(context).size.width * 0.7,
        ),
        decoration: BoxDecoration(
          color: bgColor,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(18),
            topRight: Radius.circular(18),
            bottomLeft: alignRight ? Radius.circular(18) : Radius.circular(0),
            bottomRight: alignRight ? Radius.circular(0) : Radius.circular(18),
          ),
        ),
        child: Text(
          text,
          textAlign: TextAlign.right,
          style: TextStyle(color: textColor, fontSize: 15, height: 1.4),
        ),
      ),
    );
  }
}

// ====== فقاعة الانتظار ======
class WaitingBubbleSvg extends StatelessWidget {
  const WaitingBubbleSvg({super.key});

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: Alignment.centerLeft,
      child: SizedBox(
        width: 45,
        height: 25,
        child: SvgPicture.asset(
          kWaitingSvg,   // ✅ استدعاء مباشر للثابت
          fit: BoxFit.contain,
        ),
      ),
    );
  }
}
// ====== فقاعات خيارات أنواع المستند ======
class DocumentTypeOptions extends StatelessWidget {
  const DocumentTypeOptions({super.key});

  @override
  Widget build(BuildContext context) {
    final List<String> options = [
      'عقد نفقة',
      'اتفاق حضانة',
      'إشعار طلاق',
      'اتفاق عدم التعرض',
    ];

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
      child: Wrap(
        spacing: 8,
        runSpacing: 8,
        children: options.map((option) {
          return ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF9B7D73),
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
            ),
            onPressed: () {
              // ✅ نرسل اسم المستند المحدد مباشرة إلى `_send`
              final parentState = context.findAncestorStateOfType<_LegalChatBotState>();
              if (parentState != null) {
                parentState._controller.text = option;
                parentState._send();
              }
            },
            child: Text(option),
          );
        }).toList(),
      ),
    );
  }
}

